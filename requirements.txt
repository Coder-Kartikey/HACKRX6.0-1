###############################################################################
# HackRx 6.0 RAG API - Render Deployment Requirements
#
# This file is expanded to include BOTH the direct dependencies you import
# plus the (common / currently-resolved) transitive runtime libraries those
# packages rely on, so Render does not need to re-resolve wildly different
# versions on each build. This improves build determinism.
#
# IMPORTANT:
# - Exact transitive versions can shift as upstream projects release updates.
# - For 100% reproducibility you should still (locally) run:
#       pip install pip-tools
#       pip-compile --generate-hashes --output-file requirements.txt requirements.in
#   and then commit the compiled output. (See notes at bottom.)
#
# Python Runtime Recommendation for Render:
#   Add a file: runtime.txt  (optional but recommended) with:
#       python-3.11.9
#
# Start Command for Render (Web Service):
#   uvicorn main:app --host 0.0.0.0 --port $PORT --workers 1
#
# Environment Variables to set in Render Dashboard:
#   GOOGLE_API_KEY        (Your real Gemini API key)
#   HACKRX_AUTH_TOKEN     (Custom auth token; optional to rotate)
#
# If you later enable concurrency scaling, you may increase workers based
# on CPU (rule of thumb: workers = 1 or 2 * vCPU for IO-bound FastAPI).
###############################################################################

############################
# Direct Application Deps #
############################
fastapi==0.110.2
uvicorn[standard]==0.29.0
python-multipart==0.0.9
requests==2.31.0
PyMuPDF==1.24.1
numpy==1.26.4
faiss-cpu==1.7.4
google-generativeai==0.5.2
rank-bm25==0.2.2
langchain==0.1.17
langchain-community==0.0.26

############################
# FastAPI / ASGI Stack Deps
############################
starlette==0.37.2
pydantic==2.6.4
pydantic-core==2.16.3
anyio==4.3.0
typing-extensions==4.10.0
sniffio==1.3.1
h11==0.14.0

# Uvicorn "standard" extra (some may be skipped automatically on unsupported OS)
httptools==0.6.1
uvloop==0.19.0; sys_platform != "win32" and platform_python_implementation == "CPython"
watchfiles==0.21.0
python-dotenv==1.0.1
pyyaml==6.0.1
click==8.1.7
colorama==0.4.6; sys_platform == "win32"

############################
# Requests / HTTP Stack
############################
certifi==2024.2.2
charset-normalizer==3.3.2
idna==3.6
urllib3==2.2.1

############################
# Google Generative AI & gRPC Related
############################
google-api-core==2.17.1
google-auth==2.28.1
google-auth-httplib2==0.2.0
googleapis-common-protos==1.62.0
proto-plus==1.23.0
protobuf==4.25.3
grpcio==1.62.0
grpcio-status==1.62.0
httplib2==0.22.0
packaging==23.2
six==1.16.0
# httpx is used internally by some Google / LangChain flows (include explicitly)
httpx==0.27.0
httpcore==1.0.4
rfc3986==2.0.0
h2==4.1.0
hyperframe==6.0.1
hpack==4.0.0
certifi==2024.2.2

############################
# LangChain Ecosystem
############################
langchain-core==0.1.52
langchain-text-splitters==0.0.2
langsmith==0.1.54
tenacity==8.2.3
dataclasses-json==0.6.4
marshmallow==3.21.1
typing-inspect==0.9.0
mypy-extensions==1.0.0
attrs==23.2.0
jsonpatch==1.33
jsonpointer==2.4
# AIO stack (LangChain and some retrievers may leverage aiohttp)
aiohttp==3.9.3
aiosignal==1.3.1
frozenlist==1.4.1
multidict==6.0.5
async-timeout==4.0.3
yarl==1.9.4

############################
# RAG / Retrieval Helpers
############################
# (rank-bm25 already listed; depends on numpy)
# Add optional progress tools / reliability layers if you expand the pipeline
tqdm==4.66.2

############################
# Serialization / Performance
############################
orjson==3.10.0

############################
# Optional (Not imported now, but commonly handy)
############################
# python-dotenv already pinned above (uvicorn[standard]); keep if you add .env usage
# rapidfuzz==3.6.2        # Fuzzy matching if you extend retrieval
# opentelemetry-api==1.23.0
# opentelemetry-sdk==1.23.0
# opentelemetry-instrumentation-fastapi==0.44b0

############################
# Build / Packaging Helpers
############################
pip==24.0
setuptools==69.1.1
wheel==0.42.0

###############################################################################
# NOTES FOR RENDER:
#
# 1. If build fails on faiss-cpu due to Python version mismatch, pin Python to a
#    version with a compatible prebuilt wheel (3.10 or 3.11 usually work). Use
#    runtime.txt or in the Render dashboard set PYTHON_VERSION=3.11.9.
#
# 2. Memory Usage:
#    - FAISS + PyMuPDF + LangChain can increase memory quickly; choose an
#      instance size with at least 512MB (preferably 1GB) for moderate PDFs.
#
# 3. Concurrency:
#    - The current code uses asyncio and does per-question tasks in parallel.
#      Start with workers=1 to avoid hitting Gemini rate limits prematurely.
#
# 4. Upgrading:
#    - Upgrade a single package safely:
#         pip install --upgrade PACKAGE
#         pip freeze > requirements.updated.txt
#      Then diff and selectively copy new version pins here.
#
# 5. True Reproducibility:
#    - Create requirements.in with only the DIRECT deps (top section).
#    - Run pip-compile to generate a fully hashed lock file.
#
# 6. Health Check:
#    - Root endpoint GET / returns a JSON status you can use for Render health checks.
#
# 7. Security:
#    - Never commit real GOOGLE_API_KEY. Use Render environment variables.
#
###############################################################################